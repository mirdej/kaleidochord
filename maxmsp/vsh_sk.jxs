<jittershader name="sk">
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="1.0">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
	<program name="vp" type="vertex">
<![CDATA[

// define our varying texture coordinates
varying vec2 texcoord0;
varying vec2 texcoord1;

void main( void )
{
	// the output vertex postion to the input vertex position
	// transformed by the current ModelViewProjection matrix 
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

	// assign our varying texture coordinates to the
	// input texture coordinate values transformed 
	// by the appropriate texture matrix. This is
	// necessary for rectangular and flipped textures 
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[

// define our varying texture coordinates
varying vec2 texcoord0;
varying vec2 texcoord1;

// define our rectangular texture samplers
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;


void main (void)
{
	// sample our textures
	vec4 pic = texture2DRect(tex0, texcoord0);
	vec4 mask = texture2DRect(tex1, texcoord1);
	
	// perform our calculation and write our data to the fragment color
	gl_FragColor = vec4(pic.r,pic.g,pic.b,clamp(4.*mask.r - 2.,0. ,1.));
	
}
]]>		
		</program>		
	</language>

</jittershader>
